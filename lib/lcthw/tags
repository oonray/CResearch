!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CFLAGS	makefile	/^CFLAGS= -g -O2 -Wall -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)$/;"	m
CFLAGS	makefile	/^dev: CFLAGS= -g -Wall -Isrc -W all -Wextra $(OPTFLAGS)$/;"	m
KBLU	src/lcthw/colors.h	9;"	d
KCYN	src/lcthw/colors.h	11;"	d
KGRN	src/lcthw/colors.h	7;"	d
KINF	src/lcthw/colors.h	15;"	d
KMAG	src/lcthw/colors.h	10;"	d
KNOK	src/lcthw/colors.h	14;"	d
KNRM	src/lcthw/colors.h	5;"	d
KRED	src/lcthw/colors.h	6;"	d
KWAR	src/lcthw/colors.h	16;"	d
KWHT	src/lcthw/colors.h	12;"	d
KYEL	src/lcthw/colors.h	8;"	d
LIBS	makefile	/^LIBS=-ldl $(OPTLIBS)$/;"	m
LIST_FOREACH	src/lcthw/list.h	33;"	d
List	src/lcthw/list.h	/^typedef struct List{$/;"	s
List	src/lcthw/list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	src/lcthw/list.h	/^typedef struct ListNode{$/;"	s
ListNode	src/lcthw/list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
List_clear	src/lcthw/list.c	/^void List_clear(List *list){$/;"	f
List_clear_destroy	src/lcthw/list.c	/^void List_clear_destroy(List *list){$/;"	f
List_count	src/lcthw/list.h	22;"	d
List_create	src/lcthw/list.c	/^List *List_create(){$/;"	f
List_destroy	src/lcthw/list.c	/^void List_destroy(List *list){$/;"	f
List_first	src/lcthw/list.h	23;"	d
List_last	src/lcthw/list.h	24;"	d
List_pop	src/lcthw/list.c	/^void *List_pop(List *list){$/;"	f
List_push	src/lcthw/list.c	/^void List_push(List *list,void *value){$/;"	f
List_remove	src/lcthw/list.c	/^void *List_remove(List *list,ListNode *node){$/;"	f
List_shift	src/lcthw/list.c	/^void *List_shift(List *list){$/;"	f
List_unshift	src/lcthw/list.c	/^void List_unshift(List *list,void *value){$/;"	f
NAME	makefile	/^NAME=lcthw$/;"	m
NDEBUG	tests/minunit.h	3;"	d
OBJECTS	makefile	/^OBJECTS=$(patsubst %.c,%.o, $(SOURCES))$/;"	m
PREFIX	makefile	/^PREFIX?=\/usr\/local$/;"	m
RUN_TESTS	tests/minunit.h	14;"	d
SOURCES	makefile	/^SOURCES=$(wildcard src\/**\/*.c src\/*.c)$/;"	m
SO_TARGET	makefile	/^SO_TARGET=$(patsubst %.a,%.so, $(TARGET))$/;"	m
TARGET	makefile	/^TARGET=build\/lib$(NAME).a$/;"	m
TESTS	makefile	/^TESTS=$(patsubst %.c,%, $(TEST_SRC))$/;"	m
TEST_SRC	makefile	/^TEST_SRC=$(wildcard tests\/*_tests.c)$/;"	m
__color_h	src/lcthw/colors.h	2;"	d
__dbg_h__	src/lcthw/dbg.h	2;"	d
_minuit_h	tests/minunit.h	5;"	d
all_tests	tests/list_algos_tests.c	/^RUN_TESTS(all_tests);$/;"	v
all_tests	tests/list_algos_tests.c	/^char *all_tests(){$/;"	f
all_tests	tests/list_tests.c	/^RUN_TESTS(all_tests);$/;"	v
all_tests	tests/list_tests.c	/^char *all_tests(){$/;"	f
bubble_sort	src/lcthw/list_algos.c	/^int bubble_sort(List *list, List_compare comp){$/;"	f
check	src/lcthw/dbg.h	26;"	d
check_debug	src/lcthw/dbg.h	32;"	d
check_mem	src/lcthw/dbg.h	30;"	d
clean_errno	src/lcthw/dbg.h	18;"	d
count	src/lcthw/list.h	/^    int count;$/;"	m	struct:List
create_words	tests/list_algos_tests.c	/^List *create_words(){$/;"	f
debug	src/lcthw/dbg.h	13;"	d
debug	src/lcthw/dbg.h	15;"	d
first	src/lcthw/list.h	/^    ListNode *first;$/;"	m	struct:List
function	src/lcthw/list_algos.h	/^typedef List_compare(*function)(void *,void *);$/;"	t
is_sorted	tests/list_algos_tests.c	/^int is_sorted(List *words){$/;"	f
last	src/lcthw/list.h	/^    ListNode *last;$/;"	m	struct:List
lcthw_List_algos	src/lcthw/list_algos.h	2;"	d
lcthw_List_h	src/lcthw/list.h	2;"	d
list	tests/list_tests.c	/^static List *list = NULL;$/;"	v	file:
log_err	src/lcthw/dbg.h	20;"	d
log_info	src/lcthw/dbg.h	24;"	d
log_warn	src/lcthw/dbg.h	22;"	d
mu_assert	tests/minunit.h	12;"	d
mu_run_test	tests/minunit.h	13;"	d
mu_suite_start	tests/minunit.h	11;"	d
next	src/lcthw/list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
prev	src/lcthw/list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
sentinel	src/lcthw/dbg.h	28;"	d
test1	tests/list_tests.c	/^char *test1 = "test1 data";$/;"	v
test2	tests/list_tests.c	/^char *test2 = "test2 data";$/;"	v
test3	tests/list_tests.c	/^char *test3 = "test3 data";$/;"	v
test_buble_sort	tests/list_algos_tests.c	/^char *test_buble_sort(){$/;"	f
test_create	tests/list_tests.c	/^char *test_create(){$/;"	f
test_destroy	tests/list_tests.c	/^char *test_destroy(){$/;"	f
test_merge_sort	tests/list_algos_tests.c	/^char *test_merge_sort(){$/;"	f
test_push_pop	tests/list_tests.c	/^char *test_push_pop(){$/;"	f
test_remove	tests/list_tests.c	/^char *test_remove(){$/;"	f
test_shift	tests/list_tests.c	/^char *test_shift(){$/;"	f
test_unshift	tests/list_tests.c	/^char *test_unshift(){$/;"	f
tests_run	tests/minunit.h	/^int tests_run;$/;"	v
value	src/lcthw/list.h	/^    void *value;$/;"	m	struct:ListNode
values	tests/list_algos_tests.c	/^char *values[] = {"XXXX","1234","abcd","xjvef"};$/;"	v
